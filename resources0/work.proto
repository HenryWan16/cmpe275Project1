syntax = "proto2";
option optimize_for = SPEED;
option java_package = "pipe.work";

import "common.proto";
import "election.proto";

message WorkState {
   required int32 enqueued = 1;
   required int32 processed = 2;
}

message Heartbeat {
   required WorkState state = 1;
}

/**
 * description of the work
 */
message Task {  
    required int64 series_id = 1;
    required int32 seq_id = 2;
}

// These are messages to keep the network running (not to perform work)
message WorkMessage {
   required Header header = 1;
   required int64 secret = 2;

   /**
    * The actions (request or response) is
    * implicit through which data structure is in the payload.
    */ 

   oneof payload {
      Failure err = 3;
      
      // a sanity check for testing
      bool ping = 4;

      // status updates between adjacent workers
      Heartbeat beat = 5;

      Task task = 6;
      WorkState state = 7;
      LeaderStatus leader = 8;
   }
}
