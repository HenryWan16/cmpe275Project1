syntax="proto2";
option optimize_for = SPEED;
option java_package = "pipe.work";

import "common.proto";
import "election.proto";
import "pipe.proto";

message WorkState {
   required int32 enqueued = 1;
   required int32 processed = 2;
   optional int32 queue_size = 3;
}

message Heartbeat {
   required WorkState state = 1;
}

/**
 * description of the work
 */
message Task {  
    required int64 series_id = 1;
    required int32 seq_id = 2;
}

message RegisterNode{
   required string host = 1;
   required int32 port = 2;
}

message Location {
    required int32 node_id = 1;
    required string host = 2;
    required int32 port = 3;
    required bool leaderOrNot = 4;
}

// chunk_id -- locationlist
message Hash {
 message LocationList {
   repeated Location location = 1;
 }
 map<int32, LocationList> chunklocmap = 1;
}

//file_name -- Hash list
message Log {
   message HashList {
       repeated Hash hash =1;
   }
   map<string, HashList> filehashmap =1;
}

// These are messages to keep the network running (not to perform work)
message WorkMessage {
   optional Header header = 1;
   required int64 secret = 2;
   
   /**
    * The actions (request or response) is
    * implicit through which data structure is in the payload.
    */ 

   oneof payload {
      Failure err = 3;
      
      // a sanity check for testing
      bool ping = 4;

      // status updates between adjacent workers
      Heartbeat beat = 5;

      Task task = 6;
      WorkState state = 7;      
      LeaderStatus leader = 8;
            
      Vote a_vote = 10; 
      RequestVote req_a_vote = 11;
      RegisterNode a_node = 12;
      Request request = 13;      
      Response response = 14;
      CommandMessage cmd_message = 15;
      Log log = 16;
   }
}


